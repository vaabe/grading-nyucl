#!/bin/bash

## vars ##

pdfviewer=zathura
docxviewer=libreoffice

yellow=$(tput setaf 3)
white=$(tput sgr0)

## functions and def ##

options=(\
	"-c|--configure 	set up directory"\
	"-g|--grade 		comments selector"\	
	"-v|--view		submissions selector"\
	"-s|--save 		parse comments and save grades"\
	"-p|--pdf 		convert markdown comments to pdf"\
	"-t|--stats		show statistics"\
	"-u|--upload		create upload directory"\
)

usage_message() {
	echo -e "\nusage: grade <grading dir> <option>\n"
	echo "options:"
	for i in "${options[@]}"; do
		echo "    $i"
	done
	echo ""
	exit
}

pithy_usage_message() {
	echo -e "usage: grade <grading dir> <option>\n"
}

welcome_message() {
	printf "Good evening! 拿一个啤酒.\n"
	printf "\nGrading directory: %s\n" "${hwdir}"
}

table_header() {
	for i in {1..50} ; do
		printf "-"
	done
	printf "\n"
}

convert_md_to_pdf() {
	clear
	echo -e "\nCreating comments.pdf file for each student...\n"
	for dir in $hwdir/*/ ; do
		cd "${dir}/Feedback Attachment(s)"
		echo -e "   ${dir//"${hwdir}/"/}"
		#mdpdf comments.md -t gr
		pandoc comments.md -o comments.pdf\
			--template ${srcdir}/resources/gradecomments.latex
		cd ../../
	done
	echo ""
}

make_upload_dir() {
	echo -e "\nMaking upload directory..."
	mkdir -p "${PWD}/uploads"

	if [ -f "${PWD}/uploads/$1" ] ; then
		rm "${PWD}/uploads/$1"
	fi

	updir="${PWD}/uploads/$1"
	rm -rf $updir
	cp -r $hwdir $updir

	for dir in $updir/*/ ; do
		rm -f "${dir}Feedback Attachment(s)/comments.txt"
	done

	rm -f "${updir}/grades.csv"
	rm -f "${updir}/progress.csv"
	rm -f "${updir}/commentsbuffer.txt"
	mv "${updir}/grades-tmp.csv" "${updir}/grades.csv"
	echo -e "Upload directory created: ${updir}"
	echo ""
}

run_configure() {
	cc ${srcdir}/grading.c -DCONFIGURE -o ${srcdir}/out
	${srcdir}/out "${hwdir}/"
}

run_save_verbose() {
	clear
	cc ${srcdir}/grading.c -DSAVE -DVERBOSE -o ${srcdir}/out
	${srcdir}/out "${hwdir}/"
}

run_save() {
	cc ${srcdir}/grading.c -DSAVE -o ${srcdir}/out
	${srcdir}/out "${hwdir}/"
	echo ""
}

check_if_configured() {
	if ! [ -f "$progressfile" ]; then
		echo ""
		echo -e "Grading directory not configured yet."
		echo -e "Try running: grade <dir> -c\n"
		exit 1
	fi
}

comments_scroll() {
	printf "Current progress:\n\n"
	printf "   %s     %s         %s\n" "#" "Grade" "Student"
	echo ""

	declare -i row=0
	numgraded=0
	while IFS=$',\n' read -r -a array; do
		if [[ ${array[4]} == *"-" || ${array[4]} == *" " ]] ; then
			printf "  ${yellow}[%s]    %s 	%s${white}"\
				"${array[0]}" "${array[4]}" "${array[1]}"
		else
			printf "  [%s]    %s 	%s"\
				"${array[0]}" "${array[4]}" "${array[1]}"
			numgraded=`expr $numgraded + 1`
		fi
		echo ""
	done < $progressfile
	printf "\n  %s/%s graded.\n\n" "${numgraded}" "${numstudents}" 
	read -p ":: Select student to grade: [enter #] " selection

	realnumbers='^[0-9]+$'
	if ! [[ $selection =~ $realnumbers ]] ; then
		echo -e "\nInvalid input. Exiting."
		exit 1
	fi

	selection=`expr $selection - 1`
	vim -p2 "${studentdir[${selection}]}Feedback Attachment(s)/comments.txt"\
	       "${hwdir}/commentsbuffer.txt"	

	clear
	run_save
	sleep 0.5
}

run_grade() {
	clear
	check_if_configured
	welcome_message
	while true ; do
		comments_scroll
	done
}

submissions_scroll() {
	printf "\nCurrent progress:\n\n"
	printf "   %s     %s         %s\n" "#" "Grade" "Student"
	echo ""

	declare -i row=0
	numgraded=0
	while IFS=$',\n' read -r -a array; do
		if [[ ${array[4]} == *"-" || ${array[4]} == *" " ]] ; then
			printf "  ${yellow}[%s]    %s 	%s${white}"\
				"${array[0]}" "${array[4]}" "${array[1]}"
		else
			printf "  [%s]    %s 	%s"\
				"${array[0]}" "${array[4]}" "${array[1]}"
			numgraded=`expr $numgraded + 1`
		fi
		echo ""
	done < $progressfile
	printf "\n  %s/%s graded.\n\n" "${numgraded}" "${numstudents}" 
	read -p ":: Select student submission(s) to view: [enter #] " selection

	realnumbers='^[0-9]+$'
	if ! [[ $selection =~ $realnumbers ]] ; then
		echo -e "\nInvalid input. Exiting."
		exit 1
	fi

	selection=`expr $selection - 1`

	files=($(ls "${studentdir[${selection}]}Submission attachment(s)/"))
	numfiles=${#files[@]}

	if [ $numfiles == 0 ] ; then
		clear
		printf "\nWhoops! No submission attachments in"
		printf "\".${studentdir[${selection}]//$hwdir/}\"\n"
		sleep 1
	else
		clear
		echo -e "\n\".${studentdir[${selection}]//$hwdir/}\" submission attachments:\n"
		for i in $(seq 0 $numfiles) ; do
			echo "   ${files[i]}"
		done
		sleep 1

		for i in $(seq 0 $numfiles) ; do
			if [[ ${files[i]} == *".pdf"* ]]; then
				$pdfviewer\
				"${studentdir[${selection}]}Submission attachment(s)/${files[i]}"
			elif [[ ${files[i]} == *".docx"* ]]; then
				$docxviewer\
				"${studentdir[${selection}]}Submission attachment(s)/${files[i]}"
			else
				echo ""
			fi
		done
		clear
	fi
}

run_viewer() {
	clear
	while true ; do
		submissions_scroll
	done
}

show_stats() {
	clear
	echo -e "Summary statistics: ${1}\n"
	julia "${srcdir}/stats/summarystats.jl" "${hwdir}/grades-tmp.csv" "${PWD}"
	echo ""
}

## options parsing ##

if [[ "$#" != 2 ]] ; then 
	usage_message
	exit 1
fi

if [ ! -d "$1" ] ; then
	echo -e "\nOops! Directory \"${1}\" doesn't exist."
	echo -e "Exiting.\n"
fi

hwdir="$(realpath $1)"
updir="$(realpath $1)/uploads"
srcdir="${HOME}/bin/grading"
progressfile="${hwdir}/progress.csv"

studentdir=()
i=0
for dir in $hwdir/*/ ; do
	studentdir[$i]=$dir
	i=`expr $i + 1`
done
numstudents=$i

if [ "$#" == 2 ] ; then
	option=$2
	case $option in
		-c|--configure)
			run_configure
			;;
		-g|--grade)
			check_if_configured
			run_grade
			;;
		-v|--view)
			check_if_configured
			run_viewer
			;;
		-s|--save)
			check_if_configured
			run_save_verbose
			;;
		-p|--pdf)
			check_if_configured
			convert_md_to_pdf
			;;
		-t|--stats)
			check_if_configured
			show_stats $1
			;;
		-u|--upload)
			check_if_configured
			make_upload_dir $1
			;;
		*)
			usage_message
			;;
	esac
fi
